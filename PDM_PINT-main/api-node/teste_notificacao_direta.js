// Teste direto de notifica√ß√£o - simular adi√ß√£o de material via API
const axios = require('axios');

async function testarNotificacao() {
  try {
    console.log('üß™ === TESTE DE NOTIFICA√á√ÉO ===\n');

    // 1. Verificar se o servidor est√° rodando
    console.log('1Ô∏è‚É£ Testando conectividade...');
    const health = await axios.get('http://localhost:3000/health');
    console.log('‚úÖ Servidor respondendo:', health.status === 200);

    // 2. Verificar se o utilizador 8 est√° inscrito no curso 37
    console.log('\n2Ô∏è‚É£ Verificando inscri√ß√£o...');
    const inscricoes = await axios.get('http://localhost:3000/inscricoes/8');
    const cursoTeste = inscricoes.data.find(insc => insc.idcurso === 37);
    
    if (cursoTeste) {
      console.log('‚úÖ Utilizador 8 est√° inscrito no curso 37:', cursoTeste.titulo);
    } else {
      console.log('‚ùå Utilizador 8 N√ÉO est√° inscrito no curso 37');
      return;
    }

    // 3. Testar adi√ß√£o de material via API
    console.log('\n3Ô∏è‚É£ Adicionando material via API...');
    const novoMaterial = {
      titulo: 'Teste de Notifica√ß√£o - ' + new Date().toLocaleTimeString(),
      tipo_mime: 'application/pdf',
      nome_arquivo: 'teste_notificacao.pdf',
      caminho_arquivo: '/uploads/teste_notificacao.pdf'
    };

    const response = await axios.post('http://localhost:3000/cursos/37/materiais', novoMaterial);
    
    if (response.status === 200 || response.status === 201) {
      console.log('‚úÖ Material adicionado com sucesso!');
      console.log('üìÑ Resposta:', response.data);
      console.log('\nüîî Se o sistema estiver correto, o utilizador 8 deveria receber uma notifica√ß√£o AGORA!');
    } else {
      console.log('‚ùå Erro ao adicionar material:', response.status);
    }

  } catch (error) {
    console.error('‚ùå Erro no teste:', error.response?.data || error.message);
  }
}

testarNotificacao();

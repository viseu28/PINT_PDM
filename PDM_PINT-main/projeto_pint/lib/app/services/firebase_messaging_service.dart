import 'dart:convert';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:flutter/foundation.dart';
import 'package:shared_preferences/shared_preferences.dart';
import 'package:projeto_pint/app/services/notificacao_service.dart';
import 'package:http/http.dart' as http;
import '../../config/api_config.dart';

class FirebaseMessagingService {
  static final FirebaseMessaging _firebaseMessaging = FirebaseMessaging.instance;
  static String? _token;
  static String? _currentUserId;

  static String get apiBaseUrl => '${ApiConfig.baseUrl}'; // IP da API (mesmo do AuthService)

  // Inicializar o servi√ßo de notifica√ß√µes Firebase
  static Future<void> initialize() async {
    try {
      // Solicitar permiss√£o para notifica√ß√µes
      NotificationSettings settings = await _firebaseMessaging.requestPermission(
        alert: true,
        announcement: false,
        badge: true,
        carPlay: false,
        criticalAlert: false,
        provisional: false,
        sound: true,
      );

      if (kDebugMode) {
        print('Permiss√£o de notifica√ß√£o: ${settings.authorizationStatus}');
      }

      if (settings.authorizationStatus == AuthorizationStatus.authorized) {
        print('‚úÖ Permiss√µes de notifica√ß√£o concedidas');
        
        // Obter token FCM
        await _getToken();
        
        // Configurar handlers de mensagens
        _setupMessageHandlers();
        
        // Escutar mudan√ßas no token
        _firebaseMessaging.onTokenRefresh.listen(_onTokenRefresh);
        
      } else {
        print('‚ùå Permiss√µes de notifica√ß√£o negadas');
      }
    } catch (e) {
      print('‚ùå Erro ao inicializar Firebase Messaging: $e');
    }
  }

  static Future<void> _getToken() async {
    try {
      _token = await _firebaseMessaging.getToken();
      if (_token != null) {
        if (kDebugMode) {
          print('üîë Token FCM obtido: ${_token!.substring(0, 20)}...');
        }
        await _enviarTokenParaServidor(_token!);
      }
    } catch (e) {
      print('‚ùå Erro ao obter token FCM: $e');
    }
  }

  static Future<void> _onTokenRefresh(String newToken) async {
    print('üîÑ Token FCM atualizado');
    _token = newToken;
    await _enviarTokenParaServidor(newToken);
  }

  static Future<void> _enviarTokenParaServidor(String token) async {
    try {
      // Obter ID do utilizador das prefer√™ncias
      final prefs = await SharedPreferences.getInstance();
      final userId = prefs.getInt('userId') ?? prefs.getInt('id_utilizador') ?? prefs.getInt('idutilizador');
      
      if (userId == null) {
        print('! ID do utilizador n√£o encontrado, token FCM n√£o ser√° enviado');
        return;
      }

      _currentUserId = userId.toString();
      
      final response = await http.post(
        Uri.parse('$apiBaseUrl/fcm-token'),
        headers: {
          'Content-Type': 'application/json',
        },
        body: jsonEncode({
          'utilizador_id': userId,
          'fcm_token': token,
        }),
      );

      if (response.statusCode == 200) {
        print('üîî Token FCM associado ao utilizador $userId');
      } else {
        print('‚ùå Erro ao enviar token FCM: ${response.statusCode}');
        print('üìÑ Resposta: ${response.body}');
      }
    } catch (e) {
      print('‚ùå Erro ao enviar token FCM para servidor: $e');
    }
  }

  // Configurar os handlers para diferentes estados da app
  static void _setupMessageHandlers() {
    // Quando a app est√° em foreground
    FirebaseMessaging.onMessage.listen((RemoteMessage message) {
      if (kDebugMode) {
        print('Notifica√ß√£o recebida em foreground: ${message.notification?.title}');
      }
      
      // Mostrar notifica√ß√£o local quando a app est√° aberta
      _showLocalNotification(message);
    });

    // Quando o usu√°rio toca numa notifica√ß√£o (app estava em background)
    FirebaseMessaging.onMessageOpenedApp.listen((RemoteMessage message) {
      if (kDebugMode) {
        print('Notifica√ß√£o aberta: ${message.notification?.title}');
      }
      
      // Navegar para tela espec√≠fica baseada nos dados da notifica√ß√£o
      _handleNotificationTap(message);
    });

    // Verificar se a app foi aberta atrav√©s de uma notifica√ß√£o
    FirebaseMessaging.instance.getInitialMessage().then((RemoteMessage? message) {
      if (message != null) {
        if (kDebugMode) {
          print('App aberta atrav√©s de notifica√ß√£o: ${message.notification?.title}');
        }
        _handleNotificationTap(message);
      }
    });
  }

  // Mostrar notifica√ß√£o local quando a app est√° em foreground
  static Future<void> _showLocalNotification(RemoteMessage message) async {
    await NotificacaoService.mostrarNotificacao(
      id: message.hashCode,
      titulo: message.notification?.title ?? 'Nova notifica√ß√£o',
      corpo: message.notification?.body ?? '',
      payload: jsonEncode(message.data),
    );
  }

  // Lidar com o toque numa notifica√ß√£o
  static void _handleNotificationTap(RemoteMessage message) {
    // Aqui voc√™ pode implementar navega√ß√£o baseada nos dados da notifica√ß√£o
    final data = message.data;
    final tipo = data['tipo'];
    
    switch (tipo) {
      case 'novo_material':
        final idCurso = data['idCurso'];
        print('üìö Navegar para curso $idCurso - novo material');
        // Implementar navega√ß√£o para curso espec√≠fico
        break;
      case 'alteracao_formador':
        final idCurso = data['idCurso'];
        print('üë®‚ÄçÔøΩ Navegar para curso $idCurso - formador alterado');
        // Implementar navega√ß√£o para curso espec√≠fico
        break;
      case 'alteracao_datas':
        final idCurso = data['idCurso'];
        print('üìÖ Navegar para curso $idCurso - datas alteradas');
        // Implementar navega√ß√£o para curso espec√≠fico
        break;
      case 'alteracao_estado':
        final idCurso = data['idCurso'];
        print('üì¢ Navegar para curso $idCurso - estado alterado');
        // Implementar navega√ß√£o para curso espec√≠fico
        break;
      case 'alteracao_informacoes':
        final idCurso = data['idCurso'];
        print('ÔøΩ Navegar para curso $idCurso - informa√ß√µes atualizadas');
        // Implementar navega√ß√£o para curso espec√≠fico
        break;
      case 'denuncia':
        print('‚ö†Ô∏è Navegar para notifica√ß√µes');
        // Implementar navega√ß√£o para notifica√ß√µes
        break;
      case 'resposta_forum':
        print('üí¨ Navegar para f√≥rum');
        // Implementar navega√ß√£o para f√≥rum
        break;
      default:
        if (data.containsKey('screen')) {
          // Navegar para tela espec√≠fica
          final screen = data['screen'];
          if (kDebugMode) {
            print('Navegar para: $screen');
          }
          // Implementar navega√ß√£o aqui
        }
        print('üì± Tipo de notifica√ß√£o desconhecido: $tipo');
    }
  }

  // Obter o token atual do dispositivo
  static Future<String?> getToken() async {
    return await _firebaseMessaging.getToken();
  }

  // M√©todo para atualizar o utilizador ativo
  static Future<void> setCurrentUser(String userId) async {
    _currentUserId = userId;
    if (_token != null) {
      await _enviarTokenParaServidor(_token!);
    }
  }

  // M√©todo para limpar o token quando utilizador faz logout
  static Future<void> clearToken() async {
    try {
      if (_currentUserId != null) {
        final response = await http.delete(
          Uri.parse('$apiBaseUrl/fcm-token/$_currentUserId'),
        );
        
        if (response.statusCode == 200) {
          print('‚úÖ Token FCM removido do servidor');
        }
      }
      
      _token = null;
      _currentUserId = null;
    } catch (e) {
      print('‚ùå Erro ao limpar token FCM: $e');
    }
  }

  // Inscrever-se num t√≥pico
  static Future<void> subscribeToTopic(String topic) async {
    await _firebaseMessaging.subscribeToTopic(topic);
    if (kDebugMode) {
      print('Inscrito no t√≥pico: $topic');
    }
  }

  // Cancelar inscri√ß√£o num t√≥pico
  static Future<void> unsubscribeFromTopic(String topic) async {
    await _firebaseMessaging.unsubscribeFromTopic(topic);
    if (kDebugMode) {
      print('Inscri√ß√£o cancelada do t√≥pico: $topic');
    }
  }
}

// Handler para notifica√ß√µes quando a app est√° completamente fechada
@pragma('vm:entry-point')
Future<void> firebaseMessagingBackgroundHandler(RemoteMessage message) async {
  if (kDebugMode) {
    print('Notifica√ß√£o recebida em background: ${message.notification?.title}');
  }
}

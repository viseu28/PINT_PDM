import 'package:flutter/foundation.dart';
import 'package:flutter/scheduler.dart';
import 'notificacoes_service.dart';

class NotificationManager extends ChangeNotifier {
  static final NotificationManager _instance = NotificationManager._internal();
  factory NotificationManager() => _instance;
  NotificationManager._internal();

  int _notificationCount = 0;
  bool _isLoading = false;

  int get notificationCount => _notificationCount;
  bool get isLoading => _isLoading;

  /// Carrega a contagem de notifica√ß√µes do servidor
  Future<void> loadNotificationCount() async {
    if (_isLoading) return;

    _isLoading = true;
    _safeNotifyListeners();

    try {
      final count = await NotificacaoService.contarNotificacoes();
      _notificationCount = count;
      debugPrint('üì± Notifica√ß√µes carregadas: $_notificationCount');
    } catch (e) {
      debugPrint('‚ùå Erro ao carregar notifica√ß√µes: $e');
    } finally {
      _isLoading = false;
      _safeNotifyListeners();
    }
  }

  /// Marca todas as notifica√ß√µes como lidas (zera o badge)
  void markAllAsRead() {
    _notificationCount = 0;
    debugPrint('‚úÖ Notifica√ß√µes marcadas como lidas');
    _safeNotifyListeners();
  }

  /// Adiciona uma nova notifica√ß√£o (quando receber via push)
  void addNotification() {
    _notificationCount++;
    debugPrint('üîî Nova notifica√ß√£o recebida. Total: $_notificationCount');
    _safeNotifyListeners();
  }

  /// Remove uma notifica√ß√£o (quando apagar uma notifica√ß√£o espec√≠fica)
  void removeNotification() {
    if (_notificationCount > 0) {
      _notificationCount--;
      debugPrint('üóëÔ∏è Notifica√ß√£o removida. Total: $_notificationCount');
      _safeNotifyListeners();
    }
  }

  /// For√ßa a atualiza√ß√£o da contagem
  Future<void> refresh() async {
    await loadNotificationCount();
  }

  /// Notifica listeners de forma segura
  void _safeNotifyListeners() {
    try {
      if (hasListeners) {
        SchedulerBinding.instance.addPostFrameCallback((_) {
          if (hasListeners) {
            notifyListeners();
          }
        });
      }
    } catch (e) {
      debugPrint('‚ö†Ô∏è Erro ao notificar listeners: $e');
    }
  }
}
